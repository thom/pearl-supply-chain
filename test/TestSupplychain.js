// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1

    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "Juan De La Cruz"
    const originFarmInformation = "Golden Pearl Farm"
    const originFarmLatitude = "11.849628"
    const originFarmLongitude = "119.886369"
    var productID = sku + upc
    const productNotes = "World's best golden pearls!"
    const productPrice = web3.toWei(2, "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    var supplyChain

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Pearl Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    it("01. Deploy supply chain and register roles", async () => {
      supplyChain = await SupplyChain.deployed()

      // Declare and initialize a variable for events
      var eventEmitted = false

      // Watch the emitted events for all roles
      var event = supplyChain.FarmerAdded()
      await event.watch((err, res) => { eventEmitted = true })

      var event = supplyChain.DistributorAdded()
      await event.watch((err, res) => { eventEmitted = true })

      var event = supplyChain.RetailerAdded()
      await event.watch((err, res) => { eventEmitted = true })

      var event = supplyChain.ConsumerAdded()
      await event.watch((err, res) => { eventEmitted = true })

      // Add roles
      await supplyChain.addFarmer(originFarmerID, { from: ownerID })
      await supplyChain.addDistributor(distributorID, { from: ownerID })
      await supplyChain.addRetailer(retailerID, { from: ownerID })
      await supplyChain.addConsumer(consumerID, { from: ownerID })
    })

    it("02. Testing smart contract function harvestItem() that allows a farmer to harvest pearls", async() => {
        // Declare and initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => { eventEmitted = true })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(
          upc, 
          originFarmerID, 
          originFarmName, 
          originFarmInformation, 
          originFarmLatitude, 
          originFarmLongitude, 
          productNotes,
          { from: originFarmerID }
        )

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })

    it("03. Testing smart contract function processItem() that allows a farmer to process pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Processed()
      var event = supplyChain.Processed()
      await event.watch((err, res) => { eventEmitted = true, itemState = 1 })

      // Mark an item as processed by calling function processtItem()
      await supplyChain.processItem(upc, { from: originFarmerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("04. Testing smart contract function packItem() that allows a farmer to pack pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Packed()
      var event = supplyChain.Packed()
      await event.watch((err, res) => { eventEmitted = true, itemState = 2 })

      // Mark an item as packed by calling function packItem()
      await supplyChain.packItem(upc, { from: originFarmerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("05. Testing smart contract function sellItem() that allows a farmer to sell pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event ForSale()
      var event = supplyChain.ForSale()
      await event.watch((err, res) => { eventEmitted = true, itemState = 3 })

      // Mark an item as for sale by calling function sellItem()
      await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("06. Testing smart contract function buyItem() that allows a distributor to buy pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Sold()
      var event = supplyChain.Sold()
      await event.watch((err, res) => { eventEmitted = true, itemState = 4 })

      // Mark an item as sold by calling function buyItem()
      await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
      assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    it("07. Testing smart contract function shipItem() that allows a distributor to ship pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Shipped()
      var event = supplyChain.Shipped()
      await event.watch((err, res) => { eventEmitted = true, itemState = 5 })

      // Mark an item as shipped by calling function shipItem()
      await supplyChain.shipItem(upc, { from: originFarmerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
      assert.equal(eventEmitted, true, 'Invalid event emitted')       
    })    

    it("08. Testing smart contract function receiveItem() that allows a retailer to mark pearls received", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Received()
      var event = supplyChain.Received()
      await event.watch((err, res) => { eventEmitted = true, itemState = 6 })

      // Mark an item as received by calling function receiveItem()
      await supplyChain.receiveItem(upc, { from: retailerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
      assert.equal(eventEmitted, true, 'Invalid event emitted')      
    })    

    it("09. Testing smart contract function purchaseItem() that allows a consumer to purchase pearls", async() => {
      // Declare and Initialize a variable for event
      var eventEmitted = false

      // Watch the emitted event Purchased()
      var event = supplyChain.Purchased()
      await event.watch((err, res) => { eventEmitted = true, itemState = 7 })

      // Mark an item as Purchased by calling function purchaseItem()
      await supplyChain.purchaseItem(upc, { from: consumerID })

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')


      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    it("10. Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)

      // Verify the result set:
      assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
      assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
      assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
      assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
      assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
      assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude') 
    })

    it("11. Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
      // Retrieve the just now saved item from blockchain by calling function fetchItem()
      const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

      // Verify the result set:
      assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
      assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
      assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
      assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
      assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
      assert.equal(resultBufferTwo[5], itemState, 'Error: Invalid item State')
      assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
      assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
      assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID') 
    })
});